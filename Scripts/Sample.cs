// 他の名前空間[1]のクラスとか使うためusingしてる
using System;

namespace Assets.CsTrain.Samples // このクラスの名前空間
{
    /* <summary>タグ -> クラス、メソッド、変数の説明(ドキュメントコメント[2]) */
    /// <summary>
    /// C#, UnityC#のサンプルクラス
    /// </summary>
    [Serializable] // MonoBehaviour を継承していないクラスはインスペクタに表示されないのでこの属性を付与
    public class Sample // : MonoBehaviour　継承なし[3]
    {
        /// <summary> テキスト </summary>
        protected string _text;
        
        /// <summary>
        /// コンストラクタ
        /// </summary>
        /// <param name="text"> テキスト </param>
        public Sample(string text)
        {
            this._text = text;
        }
    }

    // 脚注：
    // [1] 名前空間 ... ライブラリ(C)、パッケージ(Java)、モジュール(Python)の感じ
    // using (namespace); -> このnamespaceにあるクラスとかを使うよ宣言
    // 4行目みたいに自作クラスも名前空間を指定できる (未指定の場合はglobalな扱い：デフォは未指定)
    // => C#ファイルの関係もフォルダの階層みたいに整理できる
    // => 名前空間が異なれば同名のクラスも存在できる
    // (例：おなじみDebug.Log()の空間はUnityEngine. ただSystemにもDebugクラスがあるため、両方usingしてるときは「これどっちの？」エラー吐かれる)
    // => いろんなアセット、プラグインを入れてると既にあった自作クラスの名称と被ってエラー吐くこともあるので覚えておくといいかも

    // [2] ドキュメントコメント ... タグ分けにより説明書きやすい
    // /// とスラッシュ3つで補完されると思う(vscodeの拡張機能かも)
    /// => クラスとメソッドは書いてあると処理内容つかみやすいのでおすすめ
    /// => ドキュメントコメントのあるクラスメソッド変数等はマウスオーバーすると表示されるのが激便利

    // [3] MonoBehaviour は継承しなくても良い
    // 継承する場合:   Start(),Update()とか使える. オブジェクトにアタッチする必要がある.
    // 継承しない場合: 上記の逆. アタッチしなくても使える(インスタンス化できる)ので、キャラステータスとか数値のみ管理したいクラス向き. インスペクタに表示されないので要[Serializable]
    // => こういう手もあるよという. 非継承も取り入れるとJava-オブジェクト指向気分で設計できるのでおすすめ
}